name: QuietOS CI

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - "**"

env:
  RUST_TOOLCHAIN: nightly
  TARGET_FILE: arch/i686-none.json
  NASM_CACHE_DIR: nasm-bin

jobs:
  fmt:
    name: Check code formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust nightly with rustfmt
        run: |
          rustup toolchain install $RUST_TOOLCHAIN
          rustup component add rustfmt --toolchain $RUST_TOOLCHAIN

      - name: Run cargo fmt
        run: cargo +$RUST_TOOLCHAIN fmt --all -- --check

  clippy:
    name: Clippy linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache nasm
        id: cache-nasm
        uses: actions/cache@v4
        with:
          path: ${{ env.NASM_CACHE_DIR }}
          key: nasm-2.16.01

      - name: Install nasm if cache miss
        if: steps.cache-nasm.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y nasm
          mkdir -p $NASM_CACHE_DIR
          cp /usr/bin/nasm $NASM_CACHE_DIR/

      - name: Restore nasm binary
        run: |
          sudo cp $NASM_CACHE_DIR/nasm /usr/local/bin/
          sudo chmod +x /usr/local/bin/nasm
          nasm --version

      - name: Install Rust nightly with clippy
        run: |
          rustup toolchain install $RUST_TOOLCHAIN
          rustup component add rust-src --toolchain $RUST_TOOLCHAIN
          rustup component add clippy --toolchain $RUST_TOOLCHAIN

      - name: Run cargo clippy
        run: cargo +$RUST_TOOLCHAIN clippy --all-features -- -D warnings

  check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache nasm
        id: cache-nasm
        uses: actions/cache@v4
        with:
          path: ${{ env.NASM_CACHE_DIR }}
          key: nasm-2.16.01

      - name: Install nasm if cache miss
        if: steps.cache-nasm.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y nasm
          mkdir -p $NASM_CACHE_DIR
          cp /usr/bin/nasm $NASM_CACHE_DIR/

      - name: Restore nasm binary
        run: |
          sudo cp $NASM_CACHE_DIR/nasm /usr/local/bin/
          sudo chmod +x /usr/local/bin/nasm
          nasm --version

      - name: Install Rust nightly
        run: |
          rustup toolchain install $RUST_TOOLCHAIN
          rustup component add rust-src --toolchain $RUST_TOOLCHAIN

      - name: Check target file
        run: |
          if [ ! -f $TARGET_FILE ]; then
            echo "Missing target file $TARGET_FILE"
            exit 1
          fi

      - name: Cargo check
        run: cargo +$RUST_TOOLCHAIN check --all-targets --all-features

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache nasm
        id: cache-nasm
        uses: actions/cache@v4
        with:
          path: ${{ env.NASM_CACHE_DIR }}
          key: nasm-2.16.01

      - name: Install nasm if cache miss
        if: steps.cache-nasm.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y nasm
          mkdir -p $NASM_CACHE_DIR
          cp /usr/bin/nasm $NASM_CACHE_DIR/

      - name: Restore nasm binary
        run: |
          sudo cp $NASM_CACHE_DIR/nasm /usr/local/bin/
          sudo chmod +x /usr/local/bin/nasm
          nasm --version

      - name: Install Rust nightly and rust-src
        run: |
          rustup toolchain install $RUST_TOOLCHAIN
          rustup component add rust-src --toolchain $RUST_TOOLCHAIN

      - name: Check target file
        run: |
          if [ ! -f $TARGET_FILE ]; then
            echo "Missing target file $TARGET_FILE"
            exit 1
          fi

      - name: Build kernel
        run: cargo +$RUST_TOOLCHAIN build -Z build-std=core,compiler_builtins --target $TARGET_FILE

  test:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust nightly
        run: |
          rustup toolchain install $RUST_TOOLCHAIN
          rustup component add rust-src --toolchain $RUST_TOOLCHAIN
          rustup component add llvm-tools-preview --toolchain $RUST_TOOLCHAIN

      - name: Run cargo tests
        run: cargo +$RUST_TOOLCHAIN test